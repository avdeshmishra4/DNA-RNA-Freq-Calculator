package frequencycalculator;

import sequenceprocessor.Sequence;

public class FrequencyCalculator {

	int countA;
	int countB;
	int countC;
	int countD;
	int countE;
	int countF;
	int countG;
	int countH;
	int countI;
	int countJ;
	int countK;
	int countL;
	int countM;
	int countN;
	int countO;
	int countP;
	int countQ;
	int countR;
	int countS;
	int countT;
	int countU;
	int countV;
	int countW;
	int countX;
	int countY;
	int countOthers;

	double totalAminoAcidCount;

	double relativeFreqA = 0.0;
	double relativeFreqB = 0;
	double relativeFreqC = 0;
	double relativeFreqD;
	double relativeFreqE;
	double relativeFreqF;
	double relativeFreqG;
	double relativeFreqH;
	double relativeFreqI;
	double relativeFreqJ;
	double relativeFreqK;
	double relativeFreqL;
	double relativeFreqM;
	double relativeFreqN;
	double relativeFreqO;
	double relativeFreqP;
	double relativeFreqQ;
	double relativeFreqR;
	double relativeFreqS;
	double relativeFreqT;
	double relativeFreqU;
	double relativeFreqV;
	double relativeFreqW;
	double relativeFreqX;
	double relativeFreqY;
	float relativeFreqOthers;

	/*
	 * this method calculates frequency of each amino acid in the sequence, it
	 * also calculates total amino acid in a sequence and ultimately sums it
	 * together
	 */

	public void calculateFrequency(Sequence seq) {

		char[] aminoAcidArray = seq.getSeq().toCharArray();

		totalAminoAcidCount += aminoAcidArray.length;

		for (int i = 0; i < aminoAcidArray.length; i++) {

			switch (aminoAcidArray[i]) {

			case 'A':
				countA += 1;
				break;
			case 'B':
				countB += 1;
				break;
			case 'C':
				countC += 1;
				break;
			case 'D':
				countD += 1;
				break;
			case 'E':
				countE += 1;
				break;
			case 'F':
				countF += 1;
				break;
			case 'G':
				countG += 1;
				break;
			case 'H':
				countH += 1;
				break;
			case 'I':
				countI += 1;
				break;
			case 'J':
				countJ += 1;
				break;
			case 'K':
				countK += 1;
				break;
			case 'L':
				countL += 1;
				break;
			case 'M':
				countM += 1;
				break;
			case 'N':
				countN += 1;
				break;
			case 'O':
				countO += 1;
				break;
			case 'P':
				countP += 1;
				break;
			case 'Q':
				countQ += 1;
				break;
			case 'R':
				countR += 1;
				break;
			case 'S':
				countS += 1;
				break;
			case 'T':
				countT += 1;
				break;
			case 'U':
				countU += 1;
				break;
			case 'V':
				countV += 1;
				break;
			case 'W':
				countW += 1;
				break;
			case 'X':
				countX += 1;
				break;
			case 'Y':
				countY += 1;
				break;
			default:
				countOthers += 1;
				break;

			}

		}

	}

	/*
	 * this method calculates relative frequency and store it into respective
	 * variables
	 */

	public void calculateRelativeFrequency() {

		relativeFreqA = (double) (countA / totalAminoAcidCount);
		relativeFreqB = (countB / totalAminoAcidCount);
		relativeFreqC = (countC / totalAminoAcidCount);
		relativeFreqD = countD / totalAminoAcidCount;
		relativeFreqE = countE / totalAminoAcidCount;
		relativeFreqF = countF / totalAminoAcidCount;
		relativeFreqG = countG / totalAminoAcidCount;
		relativeFreqH = countH / totalAminoAcidCount;
		relativeFreqI = countI / totalAminoAcidCount;
		relativeFreqJ = countJ / totalAminoAcidCount;
		relativeFreqK = countK / totalAminoAcidCount;
		relativeFreqL = countL / totalAminoAcidCount;
		relativeFreqM = countM / totalAminoAcidCount;
		relativeFreqN = countN / totalAminoAcidCount;
		relativeFreqO = countO / totalAminoAcidCount;
		relativeFreqP = countP / totalAminoAcidCount;
		relativeFreqQ = countQ / totalAminoAcidCount;
		relativeFreqR = countR / totalAminoAcidCount;
		relativeFreqS = countS / totalAminoAcidCount;
		relativeFreqT = countT / totalAminoAcidCount;
		relativeFreqU = countU / totalAminoAcidCount;
		relativeFreqV = countV / totalAminoAcidCount;
		relativeFreqW = countW / totalAminoAcidCount;
		relativeFreqX = countX / totalAminoAcidCount;
		relativeFreqY = countY / totalAminoAcidCount;
		relativeFreqOthers = countOthers / totalAminoAcidCount;

	}

}
